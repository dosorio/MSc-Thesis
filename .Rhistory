dev.off()
matureAstrocyte_Model <- readSBMLmod("Results/matureAstrocyte.xml")
model_FBA <- optimizeProb(matureAstrocyte_Model)
model_FBA
model_MTF <- optimizeProb(matureAstrocyte_Model, algorithm = "mtf", wtobj = mod_obj(model_FBA))
print(getNetFlux(getFluxDist(model_MTF,findExchReact(matureAstrocyte_Model))))
findExchReact(matureAstrocyte_Model)
m <- readSBMLmod("~/Downloads/mmc2.xml")
m
optimizeProb(m)
m
require(sybilSBML)
# FBA
matureAstrocyte_Model <- readSBMLmod("Results/matureAstrocyte.xml")
model_FBA <- optimizeProb(matureAstrocyte_Model)
# Minimizing the total absolute fluxes MTF (Evaluando las múltiples posibles soluciones)
model_MTF <- optimizeProb(matureAstrocyte_Model, algorithm = "mtf", wtobj = mod_obj(model_FBA))
getNetFlux(getFluxDist(model_MTF,findExchReact(matureAstrocyte_Model)))
pdf(file = "Slides/Figures/IC50.pdf",width = 13,height = 8.45)
par(mfcol=c(1,6))
# Palmitate Value
IC50 <- function(model, controlReaction, range){
robValues <- suppressMessages(robAna(model = model,ctrlreact = controlReaction, rng = range, numP = 1000))
IC <- robValues@ctrlfl[which.min(abs(round((robValues@lp_obj/robValues@lp_obj[1000])-1,6)+0.5))]
plot(suppressMessages(robAna(model = model,ctrlreact = controlReaction, rng = range, numP = 20)),ylim=c(0,3),xlab="HDCA uptake rate \n mM/gWD*h",ylab="Objective Function Value")
abline(v = abs(IC),col="red")
text(abs(IC),robValues@lp_obj[1000]/2,substitute(IC[50]==t0, list(t0 = abs(round(IC,3)))),pos = 4)
return(IC)
}
Palmitate <- NULL
# Biomass Function
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
# Biomass Function + glu -> gln
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glu_L[e]","gln_L[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
# Biomass Function + gly -> D-serine
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("gly[c]","ser_D[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
# Biomass Function + glc -> lactate
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glc_D[c]","lac_L[e]"),
Scoef = c(-1,2),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
# Biomass Function + gly -> D-serine
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("cys_L[c]","gthrd[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
# Biomass Function + gly -> D-serine
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glc_D[c]","atp[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0)))
dev.off()
# Inflammation Palmitate Uptake
IC50palmitate_v <- round(mean(Palmitate),3)
IC50palmitate_d <- round(sd(Palmitate),3)
# install.packages("devtools")
# source("https://bioconductor.org/biocLite.R")
# library(devtools)
# biocLite("UniProt.ws")
# biocLite("GEOquery")
# install_github("gibbslab/g2f")
# install_github("gibbslab/minval")
# biocLite("ReactomePA")
# install.packages("sybilSBML")
require(UniProt.ws)
require(GEOquery)
require(g2f)
require(minval)
require(ReactomePA)
require(sybilSBML)
# Descarga FPKM Astrocitos de Corteza Saludables
getGEOSuppFiles(GEO = "GSE73721",makeDirectory = TRUE,baseDir = "Data/")
# Removiendo otros tipos de datos
Astrocyte_Expression <- read.csv(file = "~/Documents/masterThesis/Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
Astrocyte_Activated <- Astrocyte_Expression[(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))>=0.5,]
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
Astrocyte_Genes <- select(Human,keys=toupper(rownames(Astrocyte_Activated)),columns = c("ENTREZ_GENE","ENSEMBL","EC"),keytype ="GENECARDS")
# Leyendo RECON para usarla como referencia
RECON <- read.csv(file = "Data/RECON.csv",
sep = ";",
stringsAsFactors = FALSE,
header = TRUE,
col.names = c("ID","DESCRIPTION","REACTION","GPR","REVERSIBLE","LOWER.BOUND","UPPER.BOUND","OBJECTIVE"))
# Convirtiendo las GPR a ENTREZ
RECON$GPR <- gsub("([[:alnum:]]+)\\.+[[:digit:]]+"," \\1 ",RECON$GPR)
RECON$REACTION <- gsub("[[:blank:]]+"," ",RECON$REACTION)
RECON$GPR <- sapply(RECON$GPR, function(gpr){
woSpaces <- gsub("\\(|\\)|[[:blank:]]+","",gpr)
paste0(unique(unlist(lapply(lapply(unlist(strsplit(woSpaces,"or")), function(gpr){strsplit(gpr,"and")}),function(gpr){paste0("( ",paste0(sort(unlist(gpr)),collapse = " and ")," )")}))),collapse = " or ")
},USE.NAMES = FALSE)
# Extrayendo las reacciones asociadas a los genes en RECON
Astrocyte_Reactions <- unique(unlist(sapply(unique(Astrocyte_Genes$ENTREZ_GENE[!is.na(Astrocyte_Genes$EC)]),function(enzyme){RECON$REACTION[grep(paste0("[[:blank:]]",enzyme,"[[:blank:]]"),RECON$GPR)]})))
# GapFind y GapFill
Astrocyte_Reactions <- gapFill(reactionList = Astrocyte_Reactions,
reference = RECON$REACTION[nchar(RECON$GPR)==0],
consensus = TRUE)
# Añadiendo flujo
convert2sbml(RECON,"Results/RECON.xml")
DMEM <- readSBMLmod("Results/RECON.xml")
# DMEM
lowbnd(DMEM)[react_id(DMEM)%in%react_id(findExchReact(DMEM))] <- 0
lowbnd(DMEM)[react_id(DMEM) == 'EX_ca2(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_glc(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_fe3(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_k(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_na1(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_HC02172(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_Rtotal(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_Rtotal2(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_Rtotal3(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_pi(e)'] <- -100
lowbnd(DMEM)[react_id(DMEM) == 'EX_ala_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_arg_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_asn_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_asp_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_cys_L(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_glu_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_gly(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_his_L(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_ile_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_leu_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_lys_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_met_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_phe_L(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_pro_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_ser_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_thr_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_trp_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_val_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_btn(e)'] <- -100
lowbnd(DMEM)[react_id(DMEM) == 'EX_chol(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_aqcobal(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_fol(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_inost(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_lnlc(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_lnlnca(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_ncam(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_pydxn(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_ribflv(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_thm(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_thymd(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_tyr_L(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_o2(e)'] <- -0.530
lowbnd(DMEM)[react_id(DMEM) == 'EX_h2o(e)'] <- -100
lowbnd(DMEM)[react_id(DMEM) == 'EX_cl(e)'] <- -1000
lowbnd(DMEM)[react_id(DMEM) == 'EX_co2(e)'] <- 0.515
lowbnd(DMEM)[react_id(DMEM) == 'EX_so4(e)'] <- -100
lowbnd(DMEM)[react_id(DMEM) == 'EX_hdca(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_nh4(e)'] <- -100
lowbnd(DMEM)[react_id(DMEM) == 'EX_4abut(e)'] <- -1
uppbnd(DMEM)[react_id(DMEM)%in%react_id(findExchReact(DMEM))] <- 0
uppbnd(DMEM)[react_id(DMEM) == 'EX_co2(e)'] <- 0.530
uppbnd(DMEM)[react_id(DMEM) == 'EX_o2(e)'] <- -0.515
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostgd2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostge1(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostge2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostgf2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostgh2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_prostgi2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02202(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02203(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02204(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02205(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02206(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02207(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02208(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02210(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02213(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02214(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02216(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_HC02217(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrA4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrB4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrC4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrD4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrE4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_leuktrF4(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_gthrd(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_lac_L(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_glc_D(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_gln_L(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_ser_D(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_atp(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_no(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_o2s(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_fe2(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_glu_L(e)'] <- 1000
uppbnd(DMEM)[react_id(DMEM) == 'EX_h2o2(e)'] <- 1000
Enrichment <- (RECON[getFluxDist(optimizeProb(DMEM))!=0,3])
# Construyendo la reconstrucción
RECON$LOWER.BOUND <- DMEM@lowbnd
RECON$UPPER.BOUND <- DMEM@uppbnd
Astrocyte_Draft<- mapReactions(reactionList = unique(c(Astrocyte_Reactions,Enrichment)),
referenceData = RECON,
by = "REACTION")
convert2sbml(Astrocyte_Draft,"Results/Astrocyte_Draft.xml")
#
Astrocyte_DraftM <- readSBMLmod("Results/Astrocyte_Draft.xml")
optimizeProb(Astrocyte_DraftM)
#
woFlux <- blockedReactions(Astrocyte_DraftM)
#
Astrocyte_Draft <- mapReactions(reactionList = woFlux,
referenceData = Astrocyte_Draft,
by = "ID",
inverse = TRUE)
#
DMEM@obj_coef <- rep(0,DMEM@react_num)
DMEM <- addReact(DMEM, id="MC", met=c("glu_L[e]","gln_L[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- RECON[getFluxDist(optimizeProb(DMEM))!=0,3]
DMEM <- addReact(DMEM, id="MC", met=c("nh4[e]","glu_L[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("ca2[e]","glu_L[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("gly[e]","ser_D[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("ser_L[c]","ser_D[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("glc_D[e]","lac_L[e]"),
Scoef=c(-1,2), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("glc_D[c]","atp[e]"),
Scoef=c(-1,36), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("cys_L[e]","glu_L[c]","gly[c]","gthrd[e]"),
Scoef=c(-1,-1,-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","h2o2[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","o2s[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","prostgd2[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","prostge1[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","prostge2[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","prostgh2[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","prostgi2[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02208[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02210[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02213[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02214[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02216[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","HC02217[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","leuktrB4[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","leuktrE4[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("hdca[c]","no[e]"),
Scoef=c(-1,1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Enrichment <- unique(c(Enrichment,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
#
Astrocyte_Reconstruction <- mapReactions(reactionList = unique(c(Enrichment,Astrocyte_Draft$REACTION)),
referenceData = RECON,
by = "REACTION")
#
write.csv2(x = Astrocyte_Reconstruction,file = "Results/Astrocyte.csv",row.names = FALSE)
convert2sbml(Astrocyte_Reconstruction,"Results/Astrocyte.xml")
lowbnd(DMEM)[react_id(DMEM) == 'EX_estradiol(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_crtsl(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_aldstrn(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_prgstrn(e)'] <- -1
lowbnd(DMEM)[react_id(DMEM) == 'EX_tststerone(e)'] <- -1
DMEM <- addReact(DMEM, id="MC", met=c("estradiol[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- RECON[getFluxDist(optimizeProb(DMEM))!=0,3]
DMEM
DMEM <- addReact(DMEM, id="MC", met=c("estradiol[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- RECON[getFluxDist(optimizeProb(DMEM))!=0,3]
DMEM <- addReact(DMEM, id="MC", met=c("crtsl[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- unique(c(Tibolone,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("aldstrn[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- unique(c(Tibolone,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("prgstrn[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- unique(c(Tibolone,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
DMEM <- addReact(DMEM, id="MC", met=c("tststerone[e]"),
Scoef=c(-1), reversible=FALSE,
lb=0, ub=1000, obj=1)
Tibolone <- unique(c(Tibolone,(RECON[getFluxDist(optimizeProb(DMEM))!=0,3])))
Tibolone%in%Astrocyte_Reconstruction$REACTION
Tibolone[!Tibolone%in%Astrocyte_Reconstruction$REACTION]
mapReactions(reactionList = Tibolone[!Tibolone%in%Astrocyte_Reconstruction$REACTION],referenceData = RECON,by = "REACTION")
Tibolone <- mapReactions(reactionList = Tibolone[!Tibolone%in%Astrocyte_Reconstruction$REACTION],referenceData = RECON,by = "REACTION")
View(Tibolone)
write.csv2(x = Tibolone,file = "Results/TiboloneReactions.csv",row.names = FALSE)
#
write.csv2(x = Astrocyte_Reconstruction,file = "Results/Astrocyte.csv",row.names = FALSE)
convert2sbml(Astrocyte_Reconstruction,"Results/Astrocyte.xml")
Astrocyte_Expression <- as.matrix(read.csv(file = "~/Documents/masterThesis/Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,row.names = "Gene")[,c(9:26)])
require(sybilSBML)
require(Biobase)
require(exp2flux)
require(UniProt.ws)
require(exp2flux)
require(minval)
# Loading Gene Expression data
Astrocyte_Expression <- as.matrix(read.csv(file = "~/Documents/masterThesis/Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,row.names = "Gene")[,c(9:26)])
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
Astrocyte_Genes <- select(Human,keys=rownames(Astrocyte_Expression),columns = c("ENTREZ_GENE"),keytype ="GENECARDS")
# Data Summary
for(ID in unique(Astrocyte_Genes$ENTREZ_GENE)){
P <- Astrocyte_Genes$GENECARDS[Astrocyte_Genes$ENTREZ_GENE%in%ID]
P <- P[P%in%rownames(Astrocyte_Expression)]
if(length(P)>1){
for (C in seq_len(ncol(Astrocyte_Expression))){
Astrocyte_Expression[P,C] <- max(Astrocyte_Expression[P,C])
}
rownames(Astrocyte_Expression)[rownames(Astrocyte_Expression)%in%P] <- ID
}
if(length(P)==1){
rownames(Astrocyte_Expression)[rownames(Astrocyte_Expression)%in%P] <- ID
}
}
Astrocyte_Expression <- unique(Astrocyte_Expression)
Astrocyte_Expression <- Astrocyte_Expression[complete.cases(Astrocyte_Expression),]
Astrocyte_Expression <- Astrocyte_Expression[!is.na(rownames(Astrocyte_Expression)),]
# Creating healthy states
Astrocyte_Modelcsv <- read.csv2("Results/Astrocyte.csv")
Astrocyte_Model <- readSBMLmod("Results/Astrocyte.xml")
Astrocyte_Model
# División del gráfico
pdf(file = "Slides/Figures/Astrocyte_MetabolicChanges.pdf",width = 10,height = 6.5)
par(mfcol=c(1,4))
# Fetal
Astrocyte_ExpressionSet <- ExpressionSet(Astrocyte_Expression[,c(1:6)])
fetalAstrocyte_Model <- exp2flux(Astrocyte_Model,Astrocyte_ExpressionSet,scale = FALSE)
plot(fluxVar(fetalAstrocyte_Model),ylim=c(-250,250),main=paste0("Fetal: ",round(optimizeProb(fetalAstrocyte_Model)@lp_obj,3)),ylab="Biomass Flux",xlab="Reaction")
fetalAstrocyte_Modelcsv <- Astrocyte_Modelcsv
fetalAstrocyte_Modelcsv$LOWER.BOUND <- fetalAstrocyte_Model@lowbnd
fetalAstrocyte_Modelcsv$UPPER.BOUND <- fetalAstrocyte_Model@uppbnd
write.csv2(fetalAstrocyte_Modelcsv,file = "Results/fetalAstrocyte.csv",row.names = FALSE)
convert2sbml(fetalAstrocyte_Modelcsv,"Results/fetalAstrocyte.xml")
# Young
Astrocyte_ExpressionSet <- ExpressionSet(Astrocyte_Expression[,c(7:9)])
youngAstrocyte_Model <- exp2flux(Astrocyte_Model,Astrocyte_ExpressionSet,scale = FALSE)
plot(fluxVar(youngAstrocyte_Model),ylim=c(-250,250),main=paste0("Young (8-16 yo): ",round(optimizeProb(youngAstrocyte_Model)@lp_obj,3)),ylab="Biomass Flux",xlab="Reaction")
youngAstrocyte_Modelcsv <- Astrocyte_Modelcsv
youngAstrocyte_Modelcsv$LOWER.BOUND <- youngAstrocyte_Model@lowbnd
youngAstrocyte_Modelcsv$UPPER.BOUND <- youngAstrocyte_Model@uppbnd
write.csv2(youngAstrocyte_Modelcsv,file = "Results/youngAstrocyte.csv",row.names = FALSE)
convert2sbml(youngAstrocyte_Modelcsv,"Results/youngAstrocyte.xml")
# Adult
Astrocyte_ExpressionSet <- ExpressionSet(Astrocyte_Expression[,c(10:12)])
adultAstrocyte_Model <- exp2flux(Astrocyte_Model,Astrocyte_ExpressionSet,scale = FALSE)
plot(fluxVar(adultAstrocyte_Model),ylim=c(-250,250),main=paste0("Adult (21-35 yo): ",round(optimizeProb(adultAstrocyte_Model)@lp_obj,3)),ylab="Biomass Flux",xlab="Reaction")
adultAstrocyte_Modelcsv <- Astrocyte_Modelcsv
adultAstrocyte_Modelcsv$LOWER.BOUND <- adultAstrocyte_Model@lowbnd
adultAstrocyte_Modelcsv$UPPER.BOUND <- adultAstrocyte_Model@uppbnd
write.csv2(adultAstrocyte_Modelcsv,file = "Results/adultAstrocyte.csv",row.names = FALSE)
convert2sbml(adultAstrocyte_Modelcsv,"Results/adultAstrocyte.xml")
# Mature
Astrocyte_ExpressionSet <- ExpressionSet(Astrocyte_Expression[,c(13:18)])
matureAstrocyte_Model <- exp2flux(Astrocyte_Model,Astrocyte_ExpressionSet,scale = FALSE)
plot(fluxVar(matureAstrocyte_Model),ylim=c(-250,250),main=paste0("Mature (47-63 yo): ",round(optimizeProb(matureAstrocyte_Model)@lp_obj,3)),ylab="Biomass Flux",xlab="Reaction")
matureAstrocyte_Modelcsv <- Astrocyte_Modelcsv
matureAstrocyte_Modelcsv$LOWER.BOUND <- matureAstrocyte_Model@lowbnd
matureAstrocyte_Modelcsv$UPPER.BOUND <- matureAstrocyte_Model@uppbnd
write.csv2(matureAstrocyte_Modelcsv,file = "Results/matureAstrocyte.csv",row.names = FALSE)
convert2sbml(matureAstrocyte_Modelcsv,"Results/matureAstrocyte.xml")
dev.off()
model_FBA <- optimizeProb(matureAstrocyte_Model)
matureAstrocyte_Model <- readSBMLmod("Results/matureAstrocyte.xml")
model_FBA <- optimizeProb(matureAstrocyte_Model)
model_FBA
model_MTF <- optimizeProb(matureAstrocyte_Model, algorithm = "mtf", wtobj = mod_obj(model_FBA))
print(getNetFlux(getFluxDist(model_MTF,findExchReact(matureAstrocyte_Model))))
# install.packages("devtools")
# source("https://bioconductor.org/biocLite.R")
# library(devtools)
# biocLite("UniProt.ws")
# biocLite("GEOquery")
# install_github("gibbslab/g2f")
# install_github("gibbslab/minval")
# biocLite("ReactomePA")
# install.packages("sybilSBML")
require(UniProt.ws)
require(GEOquery)
require(g2f)
require(minval)
require(ReactomePA)
require(sybilSBML)
# Descarga FPKM Astrocitos de Corteza Saludables
getGEOSuppFiles(GEO = "GSE73721",makeDirectory = TRUE,baseDir = "Data/")
# Removiendo otros tipos de datos
Astrocyte_Expression <- read.csv(file = "~/Documents/masterThesis/Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
Astrocyte_Activated <- Astrocyte_Expression[(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))>=0.5,]
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
# install.packages("devtools")
# source("https://bioconductor.org/biocLite.R")
# library(devtools)
# biocLite("UniProt.ws")
# biocLite("GEOquery")
# install_github("gibbslab/g2f")
# install_github("gibbslab/minval")
# biocLite("ReactomePA")
# install.packages("sybilSBML")
require(UniProt.ws)
require(GEOquery)
require(g2f)
require(minval)
require(ReactomePA)
require(sybilSBML)
# Descarga FPKM Astrocitos de Corteza Saludables
getGEOSuppFiles(GEO = "GSE73721",makeDirectory = TRUE,baseDir = "Data/")
# Removiendo otros tipos de datos
Astrocyte_Expression <- read.csv(file = "~/Documents/masterThesis/Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
Astrocyte_Activated <- Astrocyte_Expression[(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))>=0.5,]
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
Astrocyte_Genes <- select(Human,keys=toupper(rownames(Astrocyte_Activated)),columns = c("ENTREZ_GENE","ENSEMBL","EC"),keytype ="GENECARDS")
