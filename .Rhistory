runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = FVA@lp_obj[x],max = FVA@lp_obj[(model@react_num+x)])})
warnings
View(V)
dim(V)
is.na(V)
table(is.na(V))
colSums(is.na(V))
which.max(colSums(is.na(V)))
x=52
FVA@lp_obj[x]
FVA@lp_obj[(model@react_num+x)]
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
b
sd(b)()
sd(b)
sd(b)
R = 10
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
sd(b)
sort(b)
hist(sort(b))
pM <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
return(mean(b<=t0))
}
pM(model,100)
b<t0
b>t0
pM <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
return(mean(b>=t0))
}
pM(model,100)
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
quantile(b,c(0.025,0,095))
quantile(b,c(0.025,0.095))
quantile(b,c(0.025,0.95))
quantile(b,c(0.05,0.95))
quantile(b,c(0.025,0.975))
sdM <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
return(sd(b))
}
sdM(model,100)
sdM(model,1000)
biib
mean(b)
mean(b)-b
mean(mean(b)-b)
mean(mean(b)-b)^2
sdM <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
return(c(BIAS=mean(mean(b)-b)^2,SD=sd(b)))
}
sdM(model,1000)
data("Ec_core")
sdM(Ec_core,1000)
V <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
}
O1 <- V(model1,R)
model1 <- Ec_core
model2 <- Ec_core
O1 <- V(model1,R)
O2 <- V(model2,R)
t.test(O1,O2)
t.test(O1,O2)
tM <- function(model1,model2,R){
V <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
}
M1 <- V(model1,R)
M2 <- V(model2,R)
t.test(O1,O2)
}
healthy <- readSBMLmod("Documents/masterThesis/Results/matureAstrocyte.xml")
inflammated <- healthy
lowbnd(inflammated)
uppbnd(inflammated)[inflammated@react_id=="EX_hdca(e)"] <- -0.208
tM(healthy,inflammated,1000)
tM <- function(model1,model2,R){
V <- function(model,R){
t0 <- optimizeProb(model)@lp_obj
set.seed(1234)
FVA <- fluxVar(model)
V <- sapply(seq_len(model@react_num), function(x){runif(n = FVA@react@react_num,min = min(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])),max = max(c(FVA@lp_obj[x],FVA@lp_obj[(model@react_num+x)])) )})
diag(V) <- getFluxDist(optimizeProb(model))
OF <- function(w){
f <- mapply(function(x,y){V[x,y]},x=w,y=seq_len(model@react_num))
model@lowbnd <- f
model@uppbnd <- f
optimizeProb(model)@lp_obj
}
b <- unlist(foreach(i=1:R) %dopar% {
OF(sample(seq_len(model@react_num)))
})
}
M1 <- V(model1,R)
M2 <- V(model2,R)
t.test(M1,M2)
}
tM(healthy,inflammated,1000)
citation("sybil")
citation(minval)
citation("minval")
citation("R")
citation(R)
citation()
citation("exp2flux")
cite("glpkapi")
cite("glpkAPI")
citation("glpkAPI")
?RobAna
library(sybil)
?robAna
scan("Desktop/Taller3.tsv")
v <- scan("Desktop/Taller3.tsv")
sum(round(v,2))
mean(v)
median(v)
TiboloneReactions <- read.csv("~/Documents/masterThesis/Results/TiboloneReactions.csv", sep=";")
View(TiboloneReactions)
TiboloneReactions <- read.csv("~/Documents/masterThesis/Results/TiboloneReactions.csv", sep=";")
View(TiboloneReactions)
View(TiboloneReactions)
RECON_met <- read.delim("~/Dropbox/Maestria Bioinformatica/Tesis de Maestria/Data/RECON_met.txt")
View(RECON_met)
runif(n = 4,min = 1,max = 10)
round(runif(n = 4,min = 1,max = 10))
round(runif(n = 4,min = 1,max = 10))
write.table(round(runif(n = 4,min = 1,max = 10)),quote = FALSE)
write.table(round(runif(n = 4,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,sep = "\t")
write.table(round(runif(n = 4,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,sep = "\t",file = "Taller3.tsv")
write.table(round(runif(n = 4,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,sep = "\t",file = "Desktop/Taller3.tsv")
write.table(round(runif(n = 4,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,eol = "\t",file = "Desktop/Taller3.tsv")
write.table(runif(n = 4,min = 1,max = 10),quote = FALSE,row.names = FALSE,col.names = FALSE,eol = "\t",file = "Desktop/Taller3.tsv")
write.table(round(runif(n = 9,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,eol = "\t",file = "Desktop/Taller3.tsv")
write.table(round(runif(n = 16,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,eol = "\t",file = "Desktop/Taller3.tsv")
write.table(round(runif(n = 16,min = 1,max = 10)),quote = FALSE,row.names = FALSE,col.names = FALSE,eol = "\t",file = "Desktop/Taller3.tsv")
scan("Desktop/Taller3.tsv")
n <- scan("Desktop/Taller3.tsv")
sum(n)
round(n,2)
sum(round(n,2))
mean(n)
median(n)
m <- read.csv2("Desktop/Apellido1Apellido2_1.txt")
View(m)
Apellido1Apellido2_1 <- read.csv("~/Desktop/Apellido1Apellido2_1.txt", header=FALSE, sep=";")
View(Apellido1Apellido2_1)
View(Apellido1Apellido2_1)
library(g2f)
glycolysisKEGG <- read.csv("~/Documents/minval/inst/extdata/glycolysisKEGG.csv", sep=";")
View(glycolysisKEGG)
getReference(organism = "hsa",sep = ";")
Hsapiens <- getReference(organism = "hsa",sep = ";")
glycolysisKEGG$ID[10:19]
as.character(glycolysisKEGG$ID[10:19])
write.table(as.character(glycolysisKEGG$ID[10:19]),col.names = FALSE,row.names = FALSE
)
glycolysisKEGGid <- c("R00200",
"R00658",
"R01015",
"R01061",
"R01070",
"R01512",
"R01518",
"R01786",
"R02740",
"R04779")
library(minval)
sample(glycolysisKEGGid,5)
mapReactions(reactionList = sample(glycolysisKEGGid,5),referenceData = glycolysisKEGG,by = "ID")
Hsapiens$reaction[Hsapiens$id%in%sample(glycolysisKEGGid,5)]
smG <- Hsapiens$reaction[Hsapiens$id%in%sample(glycolysisKEGGid,5)]
gapFill(smG,Hsapiens$reaction)
gapFill(smG,Hsapiens$reaction)%in%glycolysisKEGG$REACTION
View(glycolysisKEGG)
KEGG <- glycolysisKEGG$REACTION[glycolysisKEGG$ID%in%glycolysisKEGGid]
smG <- Hsapiens$reaction[Hsapiens$id%in%sample(glycolysisKEGGid,5)]
gapFill(smG,Hsapiens$reaction)%in%glycolysisKEGG$REACTION
KEGG
gapFill(smG,Hsapiens$reaction)%in%KEGG
KEGG
smG%in%KEGG
KEGG <-Hsapiens$reaction[Hsapiens$id%in%glycolysisKEGGid]
smG <- Hsapiens$reaction[Hsapiens$id%in%sample(glycolysisKEGGid,5)]
gapFill(smG,Hsapiens$reaction)%in%KEGG
gapFill(smG,Hsapiens$reaction)%in%KEGG
KEGG
smG
gapFill(smG,Hsapiens$reaction)
smG <- Hsapiens$reaction[Hsapiens$id%in%sample(glycolysisKEGGid,5)]
gapFill(smG,Hsapiens$reaction)
KEGG
r <- gapFill(smG,Hsapiens$reaction)
r %in% KEGG
r %in% KEGG
r <- gapFill(smG,Hsapiens$reaction)
gapFill(smG,Hsapiens$reaction)
r %in% KEGG
r <- gapFill(smG,Hsapiens$reaction)
r %in% KEGG
setwd("~/Documents/masterThesis")
require(sybilSBML)
# FBA
matureAstrocyte_Model <- readSBMLmod("Results/matureAstrocyte.xml")
model_FBA <- optimizeProb(matureAstrocyte_Model)
# Minimizing the total absolute fluxes MTF (Evaluando las múltiples posibles soluciones)
model_MTF <- optimizeProb(matureAstrocyte_Model, algorithm = "mtf", wtobj = mod_obj(model_FBA))
getNetFlux(getFluxDist(model_MTF,findExchReact(matureAstrocyte_Model)))
pdf(file = "Slides/Figures/IC50.pdf",width = 13,height = 8.45)
par(mfcol=c(1,6))
# Palmitate Value
IC50 <- function(model, controlReaction, range, Smain){
robValues <- suppressMessages(robAna(model = model,ctrlreact = controlReaction, rng = range, numP = 1000))
IC <- robValues@ctrlfl[which.min(abs(round((robValues@lp_obj/robValues@lp_obj[1000])-1,6)+0.5))]
R <- suppressMessages(robAna(model = model,ctrlreact = controlReaction, rng = range, numP = 20))
plot(R,ylim=c(0,3),xlab="HDCA uptake rate \n mM/gWD*h",main=Smain,ylab="Objective Function Value")
title(main=Smain,outer=F)
abline(v = abs(IC),col="red")
#abline(h = robValues@lp_obj[1000]/2,col="red")
text(abs(IC),robValues@lp_obj[1000],substitute(IC[50]==t0, list(t0 = abs(round(IC,3)))),pos = 4)
return(IC)
}
Palmitate <- NULL
# Biomass Function
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "BIOMASS\nDMEM medium"))
# Biomass Function + glu -> gln
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glu_L[e]","gln_L[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "GLU[e] to GLN[e]\nConvertion"))
# Biomass Function + gly -> D-serine
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("gly[c]","ser_D[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "GLY[e] to dSER[e]\nConvertion"))
# Biomass Function + glc -> lactate
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glc_D[c]","lac_L[e]"),
Scoef = c(-1,2),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "GLC[e] to LACTATE[e]\nConvertion"))
# Biomass Function + Cys -> Gthrd
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("cys_L[c]","gthrd[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "CYS[e] to GTHRD[e]\nConvertion"))
# Biomass Function + glc -> ATP
matureAstrocyte_Model <- addReact(model = matureAstrocyte_Model,
id = "MC",
met = c("glc_D[c]","atp[e]"),
Scoef = c(-1,1),
reversible = FALSE,
ub = 1000,
obj = TRUE)
Palmitate <- c(Palmitate,IC50(model = matureAstrocyte_Model,controlReaction = "EX_hdca(e)",range = c(-0.5,0),Smain = "GLC[e] to ATP[e]\nConvertion"))
dev.off()
# Inflammation Palmitate Uptake
IC50palmitate_v <- round(mean(Palmitate),3)
IC50palmitate_d <- round(sd(Palmitate),3)
healty <- readSBMLmod("Results/matureAstrocyte.xml")
inflammated <- healty
lowbnd(inflammated)[inflammated@react_id=="EX_hdca(e)"] <- -0.208
uppbnd(inflammated)[inflammated@react_id=="EX_hdca(e)"] <- -0.208
getFluxDist(optimizeProb(inflammated))
getFluxDist(optimizeProb(inflammated))!=0
table(getFluxDist(optimizeProb(inflammated))!=0)
table(getFluxDist(optimizeProb(inflammated))!=0)/inflammated@react_num
(table(getFluxDist(optimizeProb(inflammated))!=0)/inflammated@react_num)*100
round(table(getFluxDist(optimizeProb(inflammated))!=0)/inflammated@react_num)*100,1)
round((table(getFluxDist(optimizeProb(inflammated))!=0)/inflammated@react_num)*100,1)
52-46.6
healty <- readSBMLmod("Results/matureAstrocyte.xml")
model_FBA <- optimizeProb(healty)
model_MTF <- optimizeProb(healty, algorithm = "mtf", wtobj = mod_obj(model_FBA))
h <- getNetFlux(getFluxDist(model_MTF,findExchReact(healty)))
inflammated <- healty
lowbnd(inflammated)[inflammated@react_id=="EX_hdca(e)"] <- -0.208
uppbnd(inflammated)[inflammated@react_id=="EX_hdca(e)"] <- -0.208
model_FBA <- optimizeProb(inflammated)
model_MTF <- optimizeProb(inflammated, algorithm = "mtf", wtobj = mod_obj(model_FBA))
i <- getNetFlux(getFluxDist(model_MTF,findExchReact(inflammated)))
medicated <- readSBMLmod("Results/matureAstrocyte_Tibolone.xml")
lowbnd(medicated)[medicated@react_id=="EX_hdca(e)"] <- -0.208
uppbnd(medicated)[medicated@react_id=="EX_hdca(e)"] <- -0.208
metabolicChanges <- function(model1,model2,main){
differences <- fluxDifferences(model1,model2)
metabolicPathways <- kegg.gsets(species = "hsa", id.type = "kegg")
metabolicPathways <- matrix(gsub("[[:digit:]]+$","",names(unlist(metabolicPathways$kg.sets))),dimnames = list(as.vector(unlist(metabolicPathways$kg.sets)),c()))
metabolicPathways[,1] <- gsub("hsa[[:digit:]]+[[:blank:]]+","",metabolicPathways[,1])
genesA <- rownames(differences)[differences[,3]>0]
genesA <- unique(unlist(model1@genes[model1@react_id%in%genesA]))
genesA <- genesA[genesA%in%rownames(metabolicPathways)]
genesA <- table(metabolicPathways[genesA,])
genesK <- table(metabolicPathways)
genesK <- genesK[names(genesK)%in%names(genesA)]
genesA <- sort((genesA/genesK)*100)
genesD <- rownames(differences)[differences[,3]<0]
genesD <- unique(unlist(model1@genes[model1@react_id%in%genesD]))
genesD <- genesD[genesD%in%rownames(metabolicPathways)]
genesD <- table(metabolicPathways[genesD,])
genesK <- table(metabolicPathways)
genesK <- genesK[names(genesK)%in%names(genesD)]
genesD <- sort((genesD/genesK)*100)
par(mfcol=c(1,2),las=1,mar=c(3,15,3,3))
genesA <- genesA[!names(genesA)%in%names(genesD)]
genesD <- genesD[!names(genesD)%in%names(genesA)]
barplot(genesA,horiz = TRUE,main = "Pathway % Activation",cex.names = 0.7,adj=1)
barplot(genesD,horiz = TRUE,main = "Pathway % Inactivation",cex.names = 0.7,adj=1)
}
metabolicChanges(healthy,inflammated)
library(exp2flux)
library(gage)
library(gridExtra)
library(minval)
library(sybilSBML)
library(lattice)
metabolicChanges(healthy,inflammated)
healthy <- readSBMLmod("Results/matureAstrocyte.xml")
metabolicChanges(healthy,inflammated)
metabolicChanges <- function(model1,model2,main){
differences <- fluxDifferences(model1,model2)
metabolicPathways <- kegg.gsets(species = "hsa", id.type = "kegg")
metabolicPathways <- matrix(gsub("[[:digit:]]+$","",names(unlist(metabolicPathways$kg.sets))),dimnames = list(as.vector(unlist(metabolicPathways$kg.sets)),c()))
metabolicPathways[,1] <- gsub("hsa[[:digit:]]+[[:blank:]]+","",metabolicPathways[,1])
genesA <- rownames(differences)[differences[,3]>0]
genesA <- unique(unlist(model1@genes[model1@react_id%in%genesA]))
genesA <- genesA[genesA%in%rownames(metabolicPathways)]
genesA <- table(metabolicPathways[genesA,])
genesK <- table(metabolicPathways)
genesK <- genesK[names(genesK)%in%names(genesA)]
genesA <- sort((genesA/genesK)*100)
genesD <- rownames(differences)[differences[,3]<0]
genesD <- unique(unlist(model1@genes[model1@react_id%in%genesD]))
genesD <- genesD[genesD%in%rownames(metabolicPathways)]
genesD <- table(metabolicPathways[genesD,])
genesK <- table(metabolicPathways)
genesK <- genesK[names(genesK)%in%names(genesD)]
genesD <- sort((genesD/genesK)*100)
par(mfcol=c(1,2),las=1,mar=c(3,15,3,3))
genesAD <- genesA[!names(genesA)%in%names(genesD)]
genesDD <- genesD[!names(genesD)%in%names(genesA)]
barplot(genesAD,horiz = TRUE,main = "Pathway % Activation",cex.names = 0.7,adj=1)
barplot(genesDD,horiz = TRUE,main = "Pathway % Inactivation",cex.names = 0.7,adj=1)
}
metabolicChanges(healthy,inflammated)
