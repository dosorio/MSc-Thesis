setwd("~/Documents/masterThesis/Code")
Astrocyte_Expression <- read.csv(file = "Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
setwd("~/Documents/masterThesis")
Astrocyte_Expression <- read.csv(file = "Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
scale(Astrocyte_Expression)>=0
plot(scale(Astrocyte_Expression)>=0)
rowSums(scale(Astrocyte_Expression)>=0)
plot(rowSums(scale(Astrocyte_Expression)>=0))
plot(rowSums(scale(Astrocyte_Expression)>=0),pch=0.1)
plot(rowSums(scale(Astrocyte_Expression)>=0),pch=1)
plot(rowSums(scale(Astrocyte_Expression)>=0),pch=1,lty=0.1)
plot(rowSums(scale(Astrocyte_Expression)>=0),pch=1,cex=0.1)
rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))
rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression)
plot(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))
hist(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))
hist(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression),col = "blue")
hist(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression),col = "dodgerblue1")
hist(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression),col = "dodgerblue1",ylab="Number of Genes")
hist(rowSums(scale(Astrocyte_Expression)>=0),col = "dodgerblue1",ylab="Number of Genes",)
hist(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression),col = "dodgerblue1",ylab="Number of Genes")
hist(rowSums((scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))*100,col = "dodgerblue1",ylab="Number of Genes",xlab = "Activated")
hist(rowSums((scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))*100,col = "dodgerblue1",ylab="Number of Genes",xlab = "% Samples")
hist(rowSums((scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))*100,col = "dodgerblue1",ylab="Number of Genes",xlab = "% Samples",main="Astrocyte Active Genes")
abline(h = 50,col="red")
abline(v = 50,col="red")
hist(rowSums((scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))*100,col = "dodgerblue1",ylab="Number of Genes",xlab = "% Samples",main="Astrocyte Active Genes")
abline(v = 50,col="red")
getGEOSuppFiles(GEO = "GSE73721",makeDirectory = TRUE,baseDir = "Data/")
# Removiendo otros tipos de datos
Astrocyte_Expression <- read.csv(file = "Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
Astrocyte_Activated <- Astrocyte_Expression[(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))>=0.5,]
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
Astrocyte_Genes <- select(Human,keys=toupper(rownames(Astrocyte_Activated)),columns = c("ENTREZ_GENE","ENSEMBL","EC"),keytype ="GENECARDS")
# Leyendo RECON para usarla como referencia
RECON <- read.csv(file = "Data/RECON.csv",
sep = ";",
stringsAsFactors = FALSE,
header = TRUE,
col.names = c("ID","DESCRIPTION","REACTION","GPR","REVERSIBLE","LOWER.BOUND","UPPER.BOUND","OBJECTIVE"))
# Convirtiendo las GPR a ENTREZ
RECON$GPR <- gsub("([[:alnum:]]+)\\.+[[:digit:]]+"," \\1 ",RECON$GPR)
RECON$REACTION <- gsub("[[:blank:]]+"," ",RECON$REACTION)
RECON$GPR <- sapply(RECON$GPR, function(gpr){
woSpaces <- gsub("\\(|\\)|[[:blank:]]+","",gpr)
paste0(unique(unlist(lapply(lapply(unlist(strsplit(woSpaces,"or")), function(gpr){strsplit(gpr,"and")}),function(gpr){paste0("( ",paste0(sort(unlist(gpr)),collapse = " and ")," )")}))),collapse = " or ")
},USE.NAMES = FALSE)
# Extrayendo las reacciones asociadas a los genes en RECON
Astrocyte_Reactions <- unique(unlist(sapply(unique(Astrocyte_Genes$ENTREZ_GENE[!is.na(Astrocyte_Genes$EC)]),function(enzyme){RECON$REACTION[grep(paste0("[[:blank:]]",enzyme,"[[:blank:]]"),RECON$GPR)]})))
# install.packages("devtools")
# source("https://bioconductor.org/biocLite.R")
# library(devtools)
# biocLite("UniProt.ws")
# biocLite("GEOquery")
# install_github("gibbslab/g2f")
# install_github("gibbslab/minval")
# biocLite("ReactomePA")
# biocLite("gage")
# install.packages("sybilSBML")
require(UniProt.ws)
require(GEOquery)
require(g2f)
require(minval)
require(ReactomePA)
require(sybilSBML)
library(gage)
# Descarga FPKM Astrocitos de Corteza Saludables
getGEOSuppFiles(GEO = "GSE73721",makeDirectory = TRUE,baseDir = "Data/")
# Removiendo otros tipos de datos
Astrocyte_Expression <- read.csv(file = "Data/GSE73721/GSE73721_Human_and_mouse_table.csv.gz",
header = TRUE,
row.names = "Gene")[,c(9:26)]
# Identificando genes expresados por encima de la media en al menos el 50% de los casos
Astrocyte_Activated <- Astrocyte_Expression[(rowSums(scale(Astrocyte_Expression)>=0)/ncol(Astrocyte_Expression))>=0.5,]
# Extraigo ID's genes en diferentes bases de datos
Human <- (UniProt.ws(taxId=9606))
Astrocyte_Genes <- select(Human,keys=toupper(rownames(Astrocyte_Activated)),columns = c("ENTREZ_GENE","ENSEMBL","EC"),keytype ="GENECARDS")
# Leyendo RECON para usarla como referencia
RECON <- read.csv(file = "Data/RECON.csv",
sep = ";",
stringsAsFactors = FALSE,
header = TRUE,
col.names = c("ID","DESCRIPTION","REACTION","GPR","REVERSIBLE","LOWER.BOUND","UPPER.BOUND","OBJECTIVE"))
# Convirtiendo las GPR a ENTREZ
RECON$GPR <- gsub("([[:alnum:]]+)\\.+[[:digit:]]+"," \\1 ",RECON$GPR)
RECON$REACTION <- gsub("[[:blank:]]+"," ",RECON$REACTION)
RECON$GPR <- sapply(RECON$GPR, function(gpr){
woSpaces <- gsub("\\(|\\)|[[:blank:]]+","",gpr)
paste0(unique(unlist(lapply(lapply(unlist(strsplit(woSpaces,"or")), function(gpr){strsplit(gpr,"and")}),function(gpr){paste0("( ",paste0(sort(unlist(gpr)),collapse = " and ")," )")}))),collapse = " or ")
},USE.NAMES = FALSE)
# Extrayendo las reacciones asociadas a los genes en RECON
Astrocyte_Reactions <- unique(unlist(sapply(unique(Astrocyte_Genes$ENTREZ_GENE[!is.na(Astrocyte_Genes$EC)]),function(enzyme){RECON$REACTION[grep(paste0("[[:blank:]]",enzyme,"[[:blank:]]"),RECON$GPR)]})))
orphanProducts(Astrocyte_Reactions)
length(orphanProducts(Astrocyte_Reactions))
length(orphanReactants(Astrocyte_Reactions))
length(unique(c(orphanProducts(Astrocyte_Reactions),orphanReactants(Astrocyte_Reactions)))
)
1191-(858+823)
858-490
823-490
list(a=c(1,2,3),b=c(2,3))
write.csv2(list(a=c(1,2,3),b=c(2,3)))
write.csv2(list(a=c(1,2,3),b=c(2,3,4)))
library(sybilSBML)
setwd("~/Documents/masterThesis/Results")
model <- readSBMLmod("matureAstrocyte.xml")
213/model@react_id
213/model@react_num
(213/model@react_num)*100
(245/model@react_num)*100
(341/model@react_num)*100
(469/model@react_num)*100
(725/model@react_num)*100
(853/model@react_num)*100
(894/model@react_num)*100
model@react_num
model@met_num
(853/model@met_num)*100
(1246/model@met_num)*100
(1429/model@met_num)*100
(1557/model@met_num)*100
(1589/model@met_num)*100
(1749/model@met_num)*100
(1790/model@met_num)*100
(1813/model@met_num)*100
(1877/model@met_num)*100
(1941/model@met_num)*100
(1950/model@met_num)*100
list(a=c(1,2,3),b=c(2,3))
unlist(list(a=c(1,2,3),b=c(2,3)))
write.table(unlist(list(a=c(1,2,3),b=c(2,3))))
write.table(unlist(healthy),file = "healthy_t.txt",row.names = FALSE,col.names = FALSE)
(310/model@met_num)*100
unlist(list(a=c(1,2,3),b=c(2,3)))
unlist(list(a=c(1,2,3),b=c(2,3,4)))
matrix(unlist(list(a=c(1,2,3),b=c(2,3,4))))
matrix(unlist(list(a=c(1,2,3),b=c(2,3,4))),nrow = model@met_id)
matrix(unlist(list(a=c(1,2,3),b=c(2,3,4))),nrow = 3)
model@met_num
model@met_id
setwd("~/Documents/masterThesis/Results")
mCapabilities <- function(model){
foreach(i=model@met_id[1:2]) %dopar% {
reactionNumber <- (model@met_id == i)
print(grep("TRUE",reactionNumber))
foreach(j=model@met_id[1:10]) %dopar% {
model@obj_coef <- rep(0,model@react_num)
model <- addReact(model = model,
id = "MC",
Scoef = c(-1,1),
met = c(i,j),
reversible = FALSE,
ub = 1000,
obj = 1)
return(optimizeProb(model)@lp_obj)
}
}
}
healthy <- readSBMLmod("matureAstrocyte.xml")
healthy_Cap <- mCapabilities(healthy)
healthy_Cap <- matrix(unlist(healthy_Cap),nrow = healthy@met_num,dimnames = list(healthy@met_id,healthy@met_id))
write.csv(healthy_Cap,"healthy.csv")
library(foreach)
library(doMC)
library(sybilSBML)
registerDoMC(32)
mCapabilities <- function(model){
foreach(i=model@met_id[1:2]) %dopar% {
reactionNumber <- (model@met_id == i)
print(grep("TRUE",reactionNumber))
foreach(j=model@met_id[1:10]) %dopar% {
model@obj_coef <- rep(0,model@react_num)
model <- addReact(model = model,
id = "MC",
Scoef = c(-1,1),
met = c(i,j),
reversible = FALSE,
ub = 1000,
obj = 1)
return(optimizeProb(model)@lp_obj)
}
}
}
healthy <- readSBMLmod("matureAstrocyte.xml")
healthy_Cap <- mCapabilities(healthy)
healthy_Cap
matrix(healthy_Cap)
unlit(healthy_Cap)
unlist(healthy_Cap)
matrix(unlist(healthy_Cap),ncol = 10)
healthy_Cap <- matrix(unlist(healthy_Cap),ncol = 10)
write.csv(healthy_Cap,"healthy.csv")
save(healthy_Cap,"healthy.RData",compress = TRUE)
save(healthy_Cap,file = "healthy.RData",compress = TRUE)
load("~/Documents/masterThesis/Results/healthy.RData")
View(healthy_Cap)
